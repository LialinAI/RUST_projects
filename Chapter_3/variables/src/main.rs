fn main() {
    const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3; // константа

    // нельзя использовать mut с константами. Константы не просто неизменяемы
    // по умолчанию — они неизменяемы всегда. Для объявления констант используется
    // ключевое слово const вместо let, а также тип значения должен быть указан в аннотации.

    let mut x = 5;// изменяемая переменная

    println!("The value of x is: {}", x);
    x = 6; // присвоение нового значения 
    println!("The value of x is: {}", x);
    println!("The value of const is: {}", THREE_HOURS_IN_SECONDS);

    /////////////

    let y = 5;

    let y = y + 1; // затенение

    // первая переменная затеняется второй, то есть вторая переменная - это то, что увидит
    // компилятор, когда вы будете использовать имя переменной. По сути, вторая переменная затеняет первую,
    // принимая любое использование имени переменной на себя до тех пор, пока либо она сама не станет тенью,
    // либо не закончится область видимости.

    {
        let y = y * 2;
        println!("The value of y in the inner scope is: {y}"); // выводит 12
    } // закончилась область видимости

    println!("The value of y is: {y}"); // выводит 6, так как предыдущая область видимости закончилась

    ////////////

    let spaces = "   "; 
    let spaces = spaces.len(); // пример удобного затенения
    println!("Amount of spaces is: {}", spaces);

    // Первая переменная spaces — является строковым типом, а вторая переменная spaces — числовым типом.
    // Таким образом, затенение избавляет нас от необходимости придумывать разные имена, такие как spaces_str
    // и spaces_num. Вместо этого мы можем повторно использовать более простое имя spaces. 

    }